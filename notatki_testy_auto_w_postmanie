//when i want to check for a status code of a response i use this snippet
pm.test("status is ok", () =>
  //arrow CALLBACK FUNCTION simplifies code
  {
    pm.response.to.have.status(200); //for checking if status is 200 OK
  }
);

//when i want to check JSON response for something EXACTLY i'm looking for, i'm parsing json and i use pm.EXPECT:

pm.test("string check", () => {
  const response = pm.response.json();
  pm.expect(response.path).to.eql("something"); //string
  //or
  pm.expect(response.path).to.eql(20); //number
  //or
  pm.expect(response.path).to.be.true; //(or false) boolean

  //but when i want only to be some type, but not exactly something i can use this:

  pm.expect(response.path).to.be.a("string"); //for string
  //or
  pm.expect(response.path).to.be.a("number"); //for number

  //or check an entire array if it is an object

  pm.expect([response]).to.be.an("object");
});

//if i'm using something (like pm.response.json()) in more than one test, i can make it a global variable

const response1 = pm.response.json();

//i can have response which have 'quotes' within a 'quotes' like 'is 'banana' a banana?'. in this case i can do this

pm.expect(response.path).to.eql("is 'banana' a banana?");

//or just use double quotes

pm.expect(response.path).to.eql("is 'banana' a banana?");

//but when i don't have to have an exactly that string i can use:

pm.expect(response.path).to.have.string("is 'banana'");

//If i want to make a variable in script (like eg. in tests) i can use the method for defining variables in scripts

pm.globals.set("variableName", "variableValue"); //for global

pm.collectionVariables.set("variableName", "variableValue"); //for collection

pm.environment.set("variableName", "variableValue"); //for environment

pm.variables.set("variableName", "variableValue"); //for local

//for getting variables i use similar way, but with .get, like:

pm.globals.get("variableName");

//if i have to use dynamic variable, i use .replaceIn, like:

pm.variables.replaceIn("{{$randomFirstName}}");

//i can also delete variable, so - unset. it goes like this:

pm.variables.unset("variableName");

//i can use it to set variable with data from response like in this code:

const responseforvar = pm.response.json();

pm.globals.set("boardId", responseforvar.id);

//Tools for parsing the response body

pm.response.json(); //for JSON
xml2json(responseBody); //for XML
cheerio(pm.response.text()); //for HTML
pm.response.text(); //for Plain-text
csv - parse / lib / sync; //for CSV
