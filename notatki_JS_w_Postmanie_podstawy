/*const is variable that is constant - its cannot be changed
 (except in object - it's properties can me modified
 BUT NOT A TYPE, I MUST STAY AN OBJECT)*/
const przykladowaStala = 30;
/*let (or var) is variable, it is a container for a float, number,
 string or boolean. var or let is changeable in later code*/
let przykladowaZmienna = "Januszek";
/*object can have properties or methods, parameters within an object is called properties. 
object can have methods - a function working in or with an object*/
const przykladowyObiekt = {
  firstName: "Jamie",
  lastName: "Doe",
  age: 29,
  isMarried: false,
  przykladowaMetoda: () => "Hello",

  /*to call an property within an object, i can use "this." but syntax cant be an arrow function, but classical way ("function() {...}") like: */

  przykladowaMetoda2: function () {
    return "Hello, my name is" + this.firstName;
  },

  //if i want to use space or dash in name of an property, i can use it as a string like this:
  "middle name": "Damien",
};
//but if i want to call this property i must use square brackets
console.log(przykladowyObiekt["middle name"]);

//i can add an property to an object by this:
przykladowyObiekt.email = "jamie@example.com";
//or this:
przykladowyObiekt["e-mail"] = "jamie@example.com";
//and call an property like this:
console.log(przykladowyObiekt.przykladowaMetoda());

//i can transform object to a JSON notation by stringify like this:
let exampleJSON = JSON.stringify(przykladowyObiekt);
//but we can't interact with JSONs like with objescts - JSON is for example for sending data
//and - if it's correct - transform JSON into a JavaScript object with parse
let exampleJsObj = JSON.parse(exampleJSON);

//in postman i can get response by:
pm.response;
//and there can be .text, .json or something else. in .json case, i's parsed automatically
pm.response.json();
//i can then define it as constant
const response = pm.response.json();

//when i want to make test in postman i use pm.test
pm.test("Message displayed in test", () => {
  //when i make test i can use some functions of postman like "expect"
  pm.expect(response.status)
    // and continue it by call to check is it's equal to something
    .is.eql("UP");
});
//and results of the test will be visible in "test results" in postman

//ARRAYS can store many different types of data even different arrays, example:
const array = [5, "James", {}, []];
//arrays are helpful in dealing with big chunks of data - like objects

let array2 = [
  {
    firstName: "Jamie",
    lastName: "Doe",
    age: 29,
    isMarried: false,
    hobbies: ["soccer", "yoga"],
  },

  {
    firstName: "Joey",
    lastName: "Doe",
    age: 31,
    isMarried: false,
    hobbies: ["equestrian", "hockey"],
  },
];
//navigating in objects and arrays is done like this (REMEMBER, IN PROGRAMMING COUNTING STARTS WITH 0!):
console.log(array2[1].hobbies[1]); // - you will get "hockey" as an answer

//if you want to call data from array within an array, do it like this
let array3 = [1, 2, [3, [4, 5]]];

console.log(array3[2][1][0]);

//arrays have multiple methods. example

const numbers = [1, 48, 55, 60];

numbers.length; //returns number of elements in an array

numbers.push(8); //adds new element to an end of an array

numbers.pop; //removes last element of an array and returns it (like in console.log)

numbers.shift; //removes first number of an array and returns it

//incrementation (adding to number - "++") is depending on placement

++x //will be adding to number before returninig

x++ //will be adding after returning of function

//incrementation example if i want to make variable staring from one and incrememnt it from there

if (currentBoardNumber) {
  currentBoardNumber++;
} else {
  currentBoardNumber = 1
}

//above i have example of conditionals. there are 3 basic conditionals: if, else, else if. here's an example code with them:

let x

if ( x > 11 ) {
  console.log("greater than eleven")
}
else if (x < 11) {
  console.log("smaller than eleven")
}
else {
  console.log("equals 11")
}

/*there is also logical operators: 
 && means "and"
|| means "or"
! means "opposite" */

let y
if (x === 10 && y === 12) {
  console.log("something") // when x = 10 and y = 12 write "something". when one of them is not, do not execute
}
else if(x === 13 || y === 13){
  console.log("something else") //when x = 13 or y = 13 write "something else". one or both of them checks? execute.
}
else (!(x === 15)){
  console.log("something opposite") //when x = 15, do not execute (it will be false in boolean)
}

//only defined variable in somewhere, means it is true, but not if it's defined as false

var maxNumberOfEmployeesReached = false;
 
if (!maxNumberOfEmployeesReached) { //means if maxNumberOfEmployees is true
    if (numberOfEmployees >= 10) {
        maxNumberOfEmployeesReached = true;
        console.log('Max number of employees reached!')}}

        
//there are 3 basic loops: for, while and forEach
//"for" loops through a block of code number of times. it looks like this
for (expression1; expression2; expression3) {} 
//where expression1 is executed (one time) before code block
//expresion2 defines the condition for executing the code block
//expression3 is executed (every time) after the code block

for (let i = 0; i < 5; i++) { 
  console.log("the number is" + i)
}
//expression1 sets variable i as 0, expression2 sets loop to end before i reaches 5, expression3 increments i
//every iteration logs the number in console

//"while" loop runs the code block as long as as a specified condition is true

let i = 5

while (i < 10) {
  console.log("the number is" + i);
  i++;
}
//code will be showing text with number and increments number until it reaches 9

//"forEach" calls a function for each element in an array

let letters = ["a", "b", "c"]

letters.forEach(console.log(letters.letter))

